<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<use>
		<flag name="boundschecks">Enable bounds checking</flag>
		<flag name="internalchecks">Enable internal consistency checks at the cost of a significant performance penalty</flag>
		<flag name="unsafechecks">Enable bounds checking in unsafe operations at the cost of a significant performance penalty</flag>
		<flag name="wall">Enable all -Wall warnings</flag>
	</use>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		
		An efficient implementation of Int-indexed arrays (both mutable
		and immutable), with a powerful loop optimisation framework .
		
		It is structured as follows:
		
		[&quot;Data.Vector&quot;] Boxed vectors of arbitrary types.
		
		[&quot;Data.Vector.Unboxed&quot;] Unboxed vectors with an adaptive
		representation based on data type families.
		
		[&quot;Data.Vector.Storable&quot;] Unboxed vectors of &#39;Storable&#39; types.
		
		[&quot;Data.Vector.Primitive&quot;] Unboxed vectors of primitive types as
		defined by the @primitive@ package. &quot;Data.Vector.Unboxed&quot; is more
		flexible at no performance cost.
		
		[&quot;Data.Vector.Generic&quot;] Generic interface to the vector types.
		
		There is also a (draft) tutorial on common uses of vector.
		
		* &lt;http://haskell.org/haskellwiki/Numeric_Haskell:_A_Vector_Tutorial&gt;
	</longdescription>
</pkgmetadata>
