commit 0753b4cf8e2abb17358ec319a47fb29bbf33ff1e
Author: Tycho Andersen <tycho@tycho.ws>
Date:   Sat Aug 6 11:36:49 2016 -0600

    update for xcb-proto 1.12

diff --git a/generator/Data/XCB/Python/Parse.hs b/generator/Data/XCB/Python/Parse.hs
index bff758b..24c6f70 100644
--- a/generator/Data/XCB/Python/Parse.hs
+++ b/generator/Data/XCB/Python/Parse.hs
@@ -224,6 +224,7 @@ xExpressionToPyExpr acc (Unop o e) =
   let o' = xUnopToPyOp o
       e' = xExpressionToNestedPyExpr acc e
   in Paren (UnaryOp o' e' ()) ()
+xExpressionToPyExpr _ (ParamRef n) = mkName n
 
 getConst :: XExpression -> Maybe Int
 getConst (Value i) = Just i
@@ -289,7 +290,7 @@ structElemToPyUnpack _ _ _ (Pad i) = Left (Nothing, mkPad i)
 structElemToPyUnpack _ _ _ (Doc _ _ _) = Left (Nothing, "")
 -- XXX: What does fd/switch mean? we should implement it correctly
 structElemToPyUnpack _ _ _ (Fd _) = Left (Nothing, "")
-structElemToPyUnpack _ _ _ (Switch _ _ _) = Left (Nothing, "")
+structElemToPyUnpack _ _ _ (Switch _ _ _ _) = Left (Nothing, "")
 
 -- The enum field is mostly for user information, so we ignore it.
 structElemToPyUnpack unpacker ext m (X.List n typ len _) =
@@ -329,7 +330,7 @@ structElemToPyPack :: String
 structElemToPyPack _ _ _ (Pad i) = Left (Nothing, mkPad i)
 -- TODO: implement doc, switch, and fd?
 structElemToPyPack _ _ _ (Doc _ _ _) = Left (Nothing, "")
-structElemToPyPack _ _ _ (Switch _ _ _) = Left (Nothing, "")
+structElemToPyPack _ _ _ (Switch _ _ _ _) = Left (Nothing, "")
 structElemToPyPack _ _ _ (Fd _) = Left (Nothing, "")
 structElemToPyPack _ m accessor (SField n typ _ _) =
   let name = accessor n
@@ -556,7 +557,7 @@ mkSyntheticMethod membs = do
       getName (SField n _ _ _) = Just n
       getName (ExprField n _ _) = Just n
       getName (ValueParam _ n _ _) = Just n
-      getName (Switch n _ _) = Just n
+      getName (Switch n _ _ _) = Just n
       getName (Doc _ _ _) = Nothing
       getName (Fd n) = Just n
 
@@ -577,7 +578,7 @@ processXDecl _ (XImport n) =
   return $ Declaration [ mkRelImport n]
 processXDecl _ (XEnum name membs) =
   return $ Declaration [mkEnum name $ xEnumElemsToPyEnum id membs]
-processXDecl ext (XStruct n membs) = do
+processXDecl ext (XStruct n _ membs) = do
   m <- get
   let (statements, len) = mkStructStyleUnpack "" ext m membs
       pack = mkPackMethod ext n m Nothing membs Nothing
@@ -588,7 +589,7 @@ processXDecl ext (XStruct n membs) = do
         return $ mkAssign "fixed_size" rhs
   modify $ mkModify ext n (CompositeType ext n)
   return $ Declaration [mkXClass n "xcffib.Struct" statements (pack : fixedLength ++ synthetic)]
-processXDecl ext (XEvent name opcode membs noSequence) = do
+processXDecl ext (XEvent name opcode _ membs noSequence) = do
   m <- get
   let cname = name ++ "Event"
       prefix = if fromMaybe False noSequence then "x" else "x%c2x"
@@ -599,7 +600,7 @@ processXDecl ext (XEvent name opcode membs noSequence) = do
   return $ Declaration [ mkXClass cname "xcffib.Event" statements (pack : synthetic)
                        , eventsUpd
                        ]
-processXDecl ext (XError name opcode membs) = do
+processXDecl ext (XError name opcode _ membs) = do
   m <- get
   let cname = name ++ "Error"
       prefix = "xx2x"
@@ -611,7 +612,7 @@ processXDecl ext (XError name opcode membs) = do
                        , alias
                        , errorsUpd
                        ]
-processXDecl ext (XRequest name opcode membs reply) = do
+processXDecl ext (XRequest name opcode _ membs reply) = do
   m <- get
   let
       -- xtest doesn't seem to use the same packing strategy as everyone else,
@@ -620,7 +621,7 @@ processXDecl ext (XRequest name opcode membs reply) = do
       (args, packStmts) = mkPackStmts ext name m id prefix membs
       cookieName = (name ++ "Cookie")
       replyDecl = concat $ maybeToList $ do
-        reply' <- reply
+        GenXReply _ reply' <- reply
         let (replyStmts, _) = mkStructStyleUnpack "x%c2x4x" ext m reply'
             replyName = name ++ "Reply"
             theReply = mkXClass replyName "xcffib.Reply" replyStmts []
@@ -644,7 +645,7 @@ processXDecl ext (XRequest name opcode membs reply) = do
       requestBody = buf ++ packStmts ++ [ret]
       request = mkMethod name allArgs requestBody
   return $ Request request replyDecl
-processXDecl ext (XUnion name membs) = do
+processXDecl ext (XUnion name _ membs) = do
   m <- get
   let unpackF = structElemToPyUnpack unpackerCopy ext m
       (fields, listInfo) = partitionEithers $ map unpackF membs
